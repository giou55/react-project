Hooks were added to React in version 16.8.
Hooks allow function components to have access to state and other React features. 
Because of this, class components are generally no longer needed.
Hooks will not work in React class components.
If you have stateful logic that needs to be reused in several components, 
you can build your own custom Hooks.


There are 3 rules for hooks:
Hooks can only be called inside React function components.
Hooks can only be called at the top level of a component.
Hooks cannot be conditional


useState: 
To manage states. Returns a stateful value and an updater function to update it.

useEffect: 
To manage side-effects like API calls, subscriptions, timers, mutations, and more.

useContext: 
To return the current value for a context.

useReducer: 
A useState alternative to help with complex state management.

useCallback: 
It returns a memorized version of a callback to help a child component 
not re-render unnecessarily.

useMemo: 
It returns a memoized value that helps in performance optimizations.

useRef: 
It returns a ref object with a .current property. The ref object is mutable. 
It is mainly used to access a child component imperatively.

useLayoutEffect: 
It fires at the end of all DOM mutations. It's best to use useEffect as much 
as possible over this one as the useLayoutEffect fires synchronously.

useDebugValue: 
Helps to display a label in React DevTools for custom hooks.